<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"file:///C:\Users\805-06\Desktop\TP\5\Java\Trekkit_Java\src\main\resources\dtd\mybatis-3-mapper.dtd">

<!--
    게시글 관련 MyBatis XML 매퍼 파일
    
    역할:
    - PostDAO 인터페이스의 메서드와 SQL 쿼리 매핑
    - 복잡한 SQL 쿼리 정의
    - ResultMap을 통한 객체 매핑 설정
    - 이미지 정보 포함한 완전한 게시글 데이터 처리
    
    @author Trekkit Team
    @version 2.0 (이미지 관리 기능 추가)
-->
<mapper namespace="com.Trekkit_Java.DAO.PostDAO">

    <!-- ==================== ResultMap 정의 ==================== -->
    
    <!--
        게시글 ResultMap 정의
        
        기능:
        - posts 테이블의 컬럼과 PostDTO 필드 매핑
        - 이미지 경로는 별도 쿼리로 조회하여 collection으로 매핑
        - 복잡한 객체 구조를 자동으로 생성
    -->
    <resultMap id="PostResultMap" type="com.Trekkit_Java.DTO.PostDTO">
        <!-- 기본 키 매핑 -->
        <id property="id" column="id"/>
        
        <!-- 일반 필드 매핑 -->
        <result property="nickname" column="nickname"/>
        <result property="title" column="title"/>
        <result property="mountain" column="mountain"/>
        <result property="content" column="content"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        
        <!-- 
            이미지 경로 컬렉션 매핑
            - selectImagePaths 쿼리를 별도로 실행하여 이미지 경로 목록 조회
            - 게시글 ID를 파라미터로 전달
            - N+1 문제가 발생할 수 있으므로 필요한 경우에만 사용
        -->
        <collection property="imagePaths" ofType="String" 
                   select="selectImagePaths" column="id"/>
    </resultMap>

    <!-- ==================== 게시글 목록 조회 ==================== -->
    
    <!--
        게시글 목록 조회 쿼리
        
        기능:
        - 정렬 방식에 따른 동적 ORDER BY
        - 산 이름 필터링 (동적 WHERE 조건)
        - LIMIT/OFFSET을 이용한 페이징
        - 이미지 정보는 별도 쿼리로 조회 (ResultMap의 collection 사용)
    -->
    <select id="selectPosts" resultMap="PostResultMap">
        SELECT 
            p.id,                    <!-- 게시글 ID -->
            p.nickname,              <!-- 작성자 닉네임 -->
            p.title,                 <!-- 게시글 제목 -->
            p.mountain,              <!-- 산 이름 -->
            p.content,               <!-- 게시글 내용 -->
            p.view_count,            <!-- 조회수 -->
            p.like_count,            <!-- 좋아요 수 -->
            p.comment_count,         <!-- 댓글 수 -->
            p.created_at,            <!-- 생성 시간 -->
            p.updated_at             <!-- 수정 시간 -->
        FROM posts p
        
        <!-- 동적 WHERE 조건 -->
        <where>
            <!-- 산 이름 필터가 있는 경우에만 WHERE 조건 추가 -->
            <if test="mountain != null and mountain != ''">
                AND p.mountain = #{mountain}
            </if>
        </where>
        
        <!-- 동적 ORDER BY 조건 -->
        <choose>
            <!-- 인기순 정렬: 좋아요 수 내림차순, 동일한 경우 최신순 -->
            <when test="sort == '인기순'">
                ORDER BY p.like_count DESC, p.created_at DESC
            </when>
            <!-- 기본값 (최신순): 생성 시간 내림차순 -->
            <otherwise>
                ORDER BY p.created_at DESC
            </otherwise>
        </choose>
        
        <!-- 페이징 처리 -->
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- ==================== 게시글 개수 조회 ==================== -->
    
    <!--
        게시글 총 개수 조회 쿼리
        
        기능:
        - 필터 조건에 맞는 총 게시글 수 계산
        - 페이징 계산에 사용
        - 동적 WHERE 조건 지원
    -->
    <select id="selectPostCount" resultType="int">
        SELECT COUNT(*)
        FROM posts
        
        <!-- 동적 WHERE 조건 (목록 조회와 동일한 조건) -->
        <where>
            <if test="mountain != null and mountain != ''">
                AND mountain = #{mountain}
            </if>
        </where>
    </select>

    <!-- ==================== 게시글 상세 조회 ==================== -->
    
    <!--
        게시글 상세 조회 쿼리
        
        기능:
        - 특정 게시글의 모든 정보 조회
        - ResultMap을 통해 이미지 경로도 함께 조회됨
        - 게시글 상세 페이지에서 사용
    -->
    <select id="selectPostById" resultMap="PostResultMap">
        SELECT 
            p.id,
            p.nickname,
            p.title,
            p.mountain,
            p.content,
            p.view_count,
            p.like_count,
            p.comment_count,
            p.created_at,
            p.updated_at
        FROM posts p
        WHERE p.id = #{id}
    </select>

    <!-- ==================== 게시글 생성/수정/삭제 ==================== -->
    
    <!--
        새 게시글 삽입 쿼리
        
        기능:
        - posts 테이블에 새로운 게시글 저장
        - AUTO_INCREMENT로 ID 자동 생성
        - useGeneratedKeys="true"로 생성된 ID를 PostDTO 객체에 자동 설정
        - 초기값 설정 (view_count=0, created_at=NOW())
    -->
    <insert id="insertPost" parameterType="com.Trekkit_Java.DTO.PostDTO" 
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (
            nickname,           <!-- 작성자 닉네임 -->
            title,              <!-- 게시글 제목 -->
            mountain,           <!-- 산 이름 (NULL 가능) -->
            content,            <!-- 게시글 내용 -->
            view_count,         <!-- 조회수 (초기값 0) -->
            created_at          <!-- 생성 시간 (현재 시간) -->
        ) VALUES (
            #{nickname}, 
            #{title}, 
            #{mountain}, 
            #{content}, 
            0,                  <!-- 조회수 초기값 -->
            NOW()               <!-- 현재 시간 -->
        )
    </insert>

    <!--
        게시글 수정 쿼리
        
        기능:
        - 기존 게시글의 제목, 산 이름, 내용 수정
        - updated_at 컬럼을 현재 시간으로 자동 업데이트
        - 조회수, 좋아요 수 등은 수정하지 않음
    -->
    <update id="updatePost">
        UPDATE posts 
        SET 
            title = #{title},           <!-- 제목 수정 -->
            mountain = #{mountain},     <!-- 산 이름 수정 -->
            content = #{content},       <!-- 내용 수정 -->
            updated_at = NOW()          <!-- 수정 시간 업데이트 -->
        WHERE id = #{id}
    </update>

    <!--
        게시글 삭제 쿼리
        
        기능:
        - posts 테이블에서 특정 게시글 삭제
        - 외래키 CASCADE 설정으로 관련 데이터도 자동 삭제됨
        - 이미지, 댓글, 좋아요, 북마크 등 모든 관련 데이터 삭제
    -->
    <delete id="deletePost">
        DELETE FROM posts WHERE id = #{id}
    </delete>

    <!--
        조회수 증가 쿼리
        
        기능:
        - 게시글 조회 시 view_count를 1 증가
        - 원자적 연산으로 동시성 문제 방지
        - 별도 트랜잭션으로 처리하여 조회 실패와 분리
    -->
    <update id="increaseViewCount">
        UPDATE posts 
        SET view_count = view_count + 1 
        WHERE id = #{id}
    </update>

    <!-- ==================== 좋아요 관련 쿼리 ==================== -->
    
    <!--
        좋아요 여부 확인 쿼리 (수정됨)
        
        기능:
        - post_likes 테이블에서 특정 사용자의 좋아요 여부 확인
        - userId를 UNSIGNED 정수로 캐스팅 (데이터베이스 스키마에 따라 조정)
        - 결과: 0 (좋아요 안함) 또는 1 (좋아요 함)
    -->
    <select id="selectLikeExists" resultType="int">
        SELECT COUNT(*) 
        FROM post_likes 
        WHERE post_id = #{postId} AND user_id = CAST(#{userId} AS UNSIGNED)
    </select>

    <!--
        좋아요 추가 쿼리 (수정됨)
        
        기능:
        - post_likes 테이블에 새로운 좋아요 레코드 추가
        - userId를 UNSIGNED 정수로 캐스팅
        - created_at에 현재 시간 자동 설정
    -->
    <insert id="insertLike">
        INSERT INTO post_likes (post_id, user_id, created_at) 
        VALUES (#{postId}, CAST(#{userId} AS UNSIGNED), NOW())
    </insert>

    <!--
        좋아요 삭제 쿼리 (수정됨)
        
        기능:
        - post_likes 테이블에서 특정 좋아요 레코드 삭제
        - userId를 UNSIGNED 정수로 캐스팅
        - 좋아요 취소 시 사용
    -->
    <delete id="deleteLike">
        DELETE FROM post_likes 
        WHERE post_id = #{postId} AND user_id = CAST(#{userId} AS UNSIGNED)
    </delete>

    <!--
        게시글의 총 좋아요 수 조회 쿼리
        
        기능:
        - post_likes 테이블에서 특정 게시글의 좋아요 수 계산
        - COUNT 함수 사용
        - 실시간 좋아요 수 확인에 사용
    -->
    <select id="selectLikeCount" resultType="int">
        SELECT COUNT(*) 
        FROM post_likes 
        WHERE post_id = #{postId}
    </select>

    <!--
        posts 테이블의 like_count 컬럼 업데이트 쿼리
        
        기능:
        - post_likes 테이블의 실제 데이터를 기반으로 like_count 업데이트
        - 데이터 일관성 유지를 위해 사용
        - 좋아요 추가/삭제 후 호출됨
    -->
    <update id="updateLikeCount">
        UPDATE posts 
        SET like_count = (
            SELECT COUNT(*) 
            FROM post_likes 
            WHERE post_id = #{postId}
        )
        WHERE id = #{postId}
    </update>

    <!-- ==================== 북마크 관련 쿼리 ==================== -->
    
    <!--
        북마크 여부 확인 쿼리
        
        기능:
        - post_bookmarks 테이블에서 특정 사용자의 북마크 여부 확인
        - 결과: 0 (북마크 안함) 또는 1 (북마크 함)
    -->
    <select id="selectBookmarkExists" resultType="int">
        SELECT COUNT(*) 
        FROM post_bookmarks 
        WHERE post_id = #{postId} AND user_id = #{userId}
    </select>

    <!--
        북마크 추가 쿼리
        
        기능:
        - post_bookmarks 테이블에 새로운 북마크 레코드 추가
        - created_at에 현재 시간 자동 설정
    -->
    <insert id="insertBookmark">
        INSERT INTO post_bookmarks (post_id, user_id, created_at) 
        VALUES (#{postId}, #{userId}, NOW())
    </insert>

    <!--
        북마크 삭제 쿼리
        
        기능:
        - post_bookmarks 테이블에서 특정 북마크 레코드 삭제
        - 북마크 취소 시 사용
    -->
    <delete id="deleteBookmark">
        DELETE FROM post_bookmarks 
        WHERE post_id = #{postId} AND user_id = #{userId}
    </delete>

    <!-- ==================== 산 목록 관련 쿼리 ==================== -->
    
    <!--
        산 목록 조회 쿼리
        
        기능:
        - posts 테이블에서 사용된 산 이름들을 중복 제거하여 조회
        - NULL이나 빈 문자열 제외
        - 알파벳 순으로 정렬
        - 게시글 작성 시 드롭다운 옵션으로 사용
    -->
    <select id="selectMountains" resultType="String">
        SELECT DISTINCT mountain 
        FROM posts 
        WHERE mountain IS NOT NULL AND mountain != ''
        ORDER BY mountain
    </select>

    <!-- ==================== 이미지 관련 쿼리 (새로 추가) ==================== -->
    
    <!--
        게시글 이미지 경로 조회 쿼리
        
        기능:
        - post_images 테이블에서 특정 게시글의 모든 이미지 경로 조회
        - image_order 컬럼 기준으로 오름차순 정렬 (업로드 순서)
        - ResultMap의 collection에서 자동 호출됨
    -->
    <select id="selectImagePaths" resultType="String">
        SELECT image_path
        FROM post_images
        WHERE post_id = #{postId}
        ORDER BY image_order ASC
    </select>

    <!--
        게시글 이미지 정보 삽입 쿼리 (상세 버전)
        
        기능:
        - post_images 테이블에 이미지 메타데이터 포함하여 저장
        - 이미지 순서, 원본 파일명, 파일 크기 등 추가 정보 저장
        - 향후 이미지 관리 기능 확장을 위한 구조
    -->
    <insert id="insertPostImage">
        INSERT INTO post_images (
            post_id,            <!-- 게시글 ID -->
            image_path,         <!-- 저장된 이미지 경로 -->
            image_order,        <!-- 이미지 순서 -->
            original_name,      <!-- 원본 파일명 -->
            file_size           <!-- 파일 크기 (바이트) -->
        )
        VALUES (
            #{postId}, 
            #{imagePath}, 
            #{imageOrder}, 
            #{originalName}, 
            #{fileSize}
        )
    </insert>

    <!--
        게시글 이미지 경로 삽입 쿼리 (기본 버전)
        
        기능:
        - post_images 테이블에 기본적인 이미지 경로만 저장
        - 기존 코드와의 호환성 유지를 위해 제공
        - 간단한 이미지 저장 시 사용
    -->
    <insert id="insertImagePath">
        INSERT INTO post_images (post_id, image_path) 
        VALUES (#{postId}, #{imagePath})
    </insert>

    <!--
        게시글 이미지 삭제 쿼리
        
        기능:
        - post_images 테이블에서 특정 게시글의 모든 이미지 레코드 삭제
        - 게시글 수정 시 기존 이미지 삭제에 사용
        - 게시글 삭제 시에도 사용 (CASCADE 설정이 없는 경우)
    -->
    <delete id="deleteImagePaths">
        DELETE FROM post_images WHERE post_id = #{postId}
    </delete>

    <!-- ==================== 댓글 관련 쿼리 ==================== -->
    
    <!--
        posts 테이블의 comment_count 컬럼 업데이트 쿼리
        
        기능:
        - comments 테이블의 실제 데이터를 기반으로 comment_count 업데이트
        - 댓글 추가/삭제 시 호출됨
        - 데이터 일관성 유지를 위해 사용
    -->
    <update id="updateCommentCount">
        UPDATE posts 
        SET comment_count = (
            SELECT COUNT(*) 
            FROM comments 
            WHERE post_id = #{postId}
        )
        WHERE id = #{postId}
    </update>

</mapper>
